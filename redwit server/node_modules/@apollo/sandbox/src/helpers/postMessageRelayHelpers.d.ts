import type { ExecutionResult, GraphQLError, IntrospectionQuery } from 'graphql';
import { PARTIAL_AUTHENTICATION_TOKEN_RESPONSE, EXPLORER_QUERY_MUTATION_RESPONSE, HANDSHAKE_RESPONSE, SCHEMA_ERROR, SCHEMA_RESPONSE, PARENT_LOGOUT_SUCCESS, EXPLORER_SUBSCRIPTION_RESPONSE, EXPLORER_SET_SOCKET_ERROR, EXPLORER_SET_SOCKET_STATUS } from './constants';
import type { JSONObject, JSONValue } from './types';
export declare type HandleRequest = (endpointUrl: string, options: Omit<RequestInit, 'headers'> & {
    headers: Record<string, string>;
}) => Promise<Response>;
export declare type SocketStatus = 'disconnected' | 'connecting' | 'connected';
export declare function sendPostMessageToEmbed({ message, embeddedIFrameElement, embedUrl, }: {
    message: OutgoingEmbedMessage;
    embeddedIFrameElement: HTMLIFrameElement;
    embedUrl: string;
}): void;
declare type ResponseError = {
    message: string;
    stack?: string;
};
export declare type OutgoingEmbedMessage = {
    name: typeof SCHEMA_ERROR;
    error?: string;
    errors?: Array<GraphQLError>;
} | {
    name: typeof SCHEMA_RESPONSE;
    schema: IntrospectionQuery | string | undefined;
} | {
    name: typeof HANDSHAKE_RESPONSE;
    graphRef?: string;
    inviteToken?: string;
    accountId?: string;
    parentHref?: string;
} | {
    name: typeof PARTIAL_AUTHENTICATION_TOKEN_RESPONSE;
    partialToken?: string;
} | {
    name: typeof EXPLORER_QUERY_MUTATION_RESPONSE;
    operationId: string;
    response: {
        data?: JSONValue;
        error?: ResponseError;
        errors?: [ResponseError];
        status?: number;
        headers?: Headers;
    };
} | {
    name: typeof EXPLORER_SUBSCRIPTION_RESPONSE;
    operationId: string;
    response: {
        data?: ExecutionResult<JSONObject>;
        error?: Error;
        errors?: [Error];
    };
} | {
    name: typeof EXPLORER_SET_SOCKET_ERROR;
    error: Error | undefined;
} | {
    name: typeof EXPLORER_SET_SOCKET_STATUS;
    status: SocketStatus;
} | {
    name: typeof PARENT_LOGOUT_SUCCESS;
};
export declare type IncomingEmbedMessage = MessageEvent;
export declare function executeOperation({ endpointUrl, handleRequest, operation, operationName, variables, headers, embeddedIFrameElement, operationId, embedUrl, }: {
    endpointUrl: string;
    handleRequest: HandleRequest;
    operation: string;
    operationId: string;
    embeddedIFrameElement: HTMLIFrameElement;
    operationName: string | undefined;
    variables?: Record<string, string>;
    headers?: Record<string, string>;
    embedUrl: string;
}): Promise<void>;
export declare function executeIntrospectionRequest({ endpointUrl, headers, introspectionRequestBody, embeddedIFrameElement, }: {
    endpointUrl: string;
    embeddedIFrameElement: HTMLIFrameElement;
    headers?: Record<string, string>;
    introspectionRequestBody: string;
}): Promise<void>;
export declare const handleAuthenticationPostMessage: ({ event, embeddedIFrameElement, embedUrl, }: {
    event: IncomingEmbedMessage;
    embeddedIFrameElement: HTMLIFrameElement;
    embedUrl: string;
}) => void;
export {};
